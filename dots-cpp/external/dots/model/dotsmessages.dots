
struct DotsDescriptorRequest [internal,cached=false] {
    1: vector<string> whitelist;
    2: vector<string> blacklist;
}

struct DotsHeader [internal,cached=false] {
    1: string typeName; // name of the type, contained in the payload.
    2: timepoint sentTime; // absolute time point when the originating client sends this update.
    7: timepoint serverSentTime; // absolute time point when the server sends the this update.
    3: property_set attributes; // value properties that are contained in the payload.
    5: uint32 sender; // originating sender of this update.
    8: uint32 fromCache; // number of objects that will be sent from cache. Not-set or 0 means "not from cache".
    4: bool removeObj; // true of the contained object should be removed.
    6: [deprecated] bool isFromMyself; // is set to true in the client's callback when the sender-name matches the specific client name.
}

// With DotsMember, a client can join or leave groups.
struct DotsMember [internal,cached=false] {
    1: string groupName; // group to join or leave
    2: DotsMemberEvent event; // set to join or leave
    3: uint32 client; // ID of the client that join or leave.
}

// Used in two cases:
//
// 1. After DotsMsgHello the client sends DotsMsgConnect with it's name
// and preloadCache set to true, if the client want's to preload it's cache.
//
// 2. In case of preloading, the client needs to tell the server, when all subscriptions
// has been sent. This is done by sending DotsMsgConnect with preloadClientFinished set to true.
struct DotsMsgConnect [internal,cached=false] {
    1: string clientName; // transmit the name of the client to the server.
    2: bool preloadCache; // set to true, when the client wants to preload it's cache.
    3: bool preloadClientFinished; // transmit and set to true, when the client has send all subscriptions for preloading.
    4: string authChallengeResponse;
    5: string cnonce;
}

struct DotsMsgConnectResponse [internal,cached=false] {
    1: string serverName;
    5: uint32 clientId;
    2: bool accepted;
    3: bool preload;
    4: bool preloadFinished;
}

struct DotsMsgError [internal,cached=false] {
    1: int32 errorCode;
    2: string errorText;
}

struct DotsMsgHello [internal,cached=false] {
    1: string serverName;
    2: uint64 authChallenge;
    3: bool authenticationRequired;
}

struct DotsTransportHeader [internal,cached=false] {
    1: [deprecated] string nameSpace;
    2: [deprecated] string destinationGroup;
    3: DotsHeader dotsHeader;
    4: uint32 payloadSize;
    5: [deprecated] uint32 destinationClientId;
}

// Clears (removes) the objects in the container of the listed types.
struct DotsClearCache [internal,cached=false] {
    1: vector<string> typeNames; // names of the types to clear
}

struct DotsDumpContinuousRecorder [cached=false] {
    1: string recorderId;
    2: string fileName;
}

enum DotsContinuousRecorderState {
    1: idle,
    2: recording,
    3: dumping
}

struct DotsContinuousRecorderStatus {
    1: [key] string recorderId;
    2: uint32 bufferSize;
    3: uint32 bufferSizeUsed;
    4: timepoint startTime;
    5: DotsContinuousRecorderState state;
}