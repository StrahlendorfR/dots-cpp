#pragma once
// Generated file, do not change.

#include <dots/dots_base.h>
#include <dots/type/TStruct.h>
#include <dots/type/TProperty.h>
{% for imp in imports %}
#include "{{imp}}.dots.h"
{% endfor %}
{% for inc in includes %}
#include "{{inc}}"
{% endfor %}

namespace dots::types
{
{% for comment_line in structComment %}
    /// {{comment_line}}
{% endfor %}
    ///
{% for property in attributes %}
    /// @param {{property.name}} {{property.comment}}
{% endfor %}
    ///
    /// @code
    /// Structure {
{% for property in attributes %}
    ///    {{property.tag}}: {{property.type}} {{property.name}} // {{property.comment}}
{% endfor %}
    /// }
    /// @endcode
    struct {{name}} : dots::type::TStruct<{{name}}>
    {
{% for property in attributes %}
        struct {{property.name}}_t : dots::type::TProperty<{{property.cxx_type}}, {{property.name}}_t, {% if loop.first %}void{% else %}{{loop.previtem.name}}_t{% endif %}, {{name}}>
        {
			static constexpr auto Description = MakePropertyDescription({{property.tag}}, "{{property.type}}", "{{property.name}}", {% if property.key %}true{% else %}false{% endif %});
		
			{{property.name}}_t& operator = (const {{property.name}}_t& rhs) = default;
			{{property.name}}_t& operator = ({{property.name}}_t&& rhs) = default;
			using TProperty::operator=;

		private:
			friend struct {{name}};

			{{property.name}}_t() = default;
			{{property.name}}_t(const {{property.name}}_t& other) = default;
			{{property.name}}_t({{property.name}}_t&& other) = default;
			~{{property.name}}_t() = default;
        };
		using {{property.name}}_t_i = {{property.name}}_t::init_t;

{% endfor %}
        static constexpr auto Description = MakeStructDescription("{{name}}", {% if options.cached %}Cached{% else %}Uncached{% endif %}{% if options.internal %} | Internal{% endif %}{% if options.persistent %} | Persistent{% endif %}{% if options.cleanup %} | Cleanup{% endif %}{% if options.substruct_only %} | SubstructOnly{% endif %}, 
{% for property in attributes %}
            {{property.name}}_t::Description{% if not loop.last %},{% endif %}

{% endfor %}
        );
        using _key_properties_t = std::tuple<{% for property in keyAttributes %}{{property.name}}_t*{% if not loop.last %}, {% endif %}{% endfor %}>;
        using _properties_t     = std::tuple<{% for property in attributes %}{{property.name}}_t*{% if not loop.last %}, {% endif %}{% endfor %}>;

		using TStruct::TStruct;
		{{name}}(const {{name}}& other) = default;
		{{name}}({{name}}&& other) = default;
		~{{name}}() = default;

		{{name}}& operator = (const {{name}}& rhs) = default;
		{{name}}& operator = ({{name}}&& rhs) = default;        

{% for property in attributes %}
        {{property.name}}_t {{property.name}}; // {{property.comment}} (key: {{property.key | lower }})
{% endfor %}
    };
}

#if (!defined DOTS_TYPES_NO_USING) && (!defined {{name}}_NO_USING)
using dots::types::{{name}};
#endif