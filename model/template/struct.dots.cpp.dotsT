// Generated file, do not change.
{#-#pragma GCC diagnostic ignored "-Winvalid-offsetof"#}
{#-#pragma GCC diagnostic ignored "-Wmissing-field-initializers"#}

//#include "dots/cpp_config.h"
#include "{{name}}.dots.h"

#include "StructDescriptorData.dots.h"
#include "dots/type/Registry.h"

namespace dots
{
namespace types
{

{{name}}::~{{name}}()
{
}

const StructDescriptorData {{name}}::_dd()
{
    StructDescriptorData sd;
    sd.setName("{{name}}");
    auto& flags = sd.refFlags();
    flags.setCached({{options.cached | lower}});
    flags.setInternal({{options.internal | lower}});
    flags.setPersistent({{options.persistent | lower}});
    flags.setCleanup({{options.cleanup | lower}});
    flags.setLocal({{options.local | lower}});
    flags.setSubstructOnly({{options.substruct_only | lower}});

    auto& properties = sd.refProperties();

{% for attr in attributes %}
    {
        StructPropertyData prop;
        prop.setName("{{attr.name}}");
        prop.setTag((int){{name}}::Att::{{attr.name}});
        prop.setIsKey({{attr.key | lower}});
        prop.setType("{{attr.type}}");

        properties.push_back(prop);
    }
{% endfor %};

    return sd;
}


const type::StructDescriptor *{{name}}::_td()
{
    static const type::StructDescriptor *desc = nullptr;
    if (desc == nullptr)
    {
        desc = type::Descriptor::registry().findStructDescriptor("{{name}}");
    }

    if (desc == nullptr)
    {
{% for attr in attributes %}
        type::getDescriptor(&(({{name}}*)0)->m_{{attr.name}});
{% endfor %}

        desc = type::StructDescriptor::createFromStructDescriptorData(_dd());
    }

    return desc;
}

} // namespace types
} // namespace dots
