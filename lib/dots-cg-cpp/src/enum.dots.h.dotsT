#pragma once
// This file was generated by dcg.py, do not edit, becaue the changes will be overwritten.
#include <ostream>
#include "dots/dots_base.h"

{% for inc in includes %}
#include "{{inc}}"
{% endfor %}

namespace dots
{
namespace types
{

/// {{comment}}
///
/// @code
{% for elem in items %}
/// {{elem.name}} = {{elem.value}} ({{elem.comment}})
{% endfor %}
/// @endcode
enum class {{name}}
{
{% for elem in items %}
  {{elem.name}} = {{elem.value}}, ///< {{elem.comment}}
{% endfor %}
};

{% for elem in items %}
// {{name}}::{{elem.name}}: idx= {{elem.idx}}, tag = {{elem.tag}}
{% endfor %}

} // namespace types
} // namespace dots

static inline
std::ostream& operator<<(std::ostream& os, const dots::types::{{name}} &val)
{
    os << dots::type::enumToString(val);
    return os;
}

static inline
std::string to_string(const dots::types::{{name}} &val)
{
    return dots::type::enumToString(val);
}

#if (!defined DOTS_TYPES_NO_USING) && (!defined {{name}}_NO_USING)
using dots::types::{{name}};
#endif
