#pragma once
// This file was generated by the DOTS code generator. Do not change!
#include <dots/type/NewFundamentalTypes.h>
#include <dots/type/NewEnumDescriptor.h>

{% for inc in includes %}
#include "{{inc}}"
{% endfor %}

namespace dots::types
{
    /// {{comment}}
    ///
    /// @code
    {% for elem in items %}
    /// {{elem.name}} = {{elem.value}} ({{elem.comment}})
    {% endfor %}
    /// @endcode
    enum class {{name}} : int32_t
    {
    {% for elem in items %}
        {{elem.name}} = {{elem.value}}{% if not loop.last %},{% endif %} ///< {{elem.comment}}
    {% endfor %}
    };
}

namespace dots::type
{
    template <>
    struct Descriptor<types::{{name}}> : EnumDescriptor<types::{{name}}>
    {
        using value_t = types::{{name}};
        
        Descriptor() : EnumDescriptor("{{name}}", {
            {% for elem in items %}
                EnumeratorDescriptor{ {{elem.tag}}, "{{elem.name}}", types::{{name}}::{{elem.name}} }{% if not loop.last %},{% endif %}

            {% endfor %}
            })
        {
            /* do nothing */
        }
    };
}

#if (!defined DOTS_TYPES_NO_USING) && (!defined {{name}}_NO_USING)
using dots::types::{{name}};
#endif
